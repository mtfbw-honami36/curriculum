■ 開発
ウォーターフォール開発
開発手順を1つずつ確認しながら工程を進めていく手法のことです。開発を各工程に分けて進めますが、次のフェーズに進んでしまうと後戻りができない手法でもあります。

アジャイル開発
アジャイル型開発では、開発メンバーがシステムにおける優先度に順位をつけ、短い期間での納品を目指して動きます。
システムの優先順位を決めるためにミーティングを毎日行い、チーム内でスムーズに連携をとる「スクラム」という手法が主に取られます。

マイグレーション
ソフトウェアやシステム、データなどを別の環境に移転したり、新しい環境に切り替えたりすることを意味する

デグレーション
直したはずのバグ（プログラムのおかしいところ）が復活していたり、前はなかったはずのバグがあったり、実装したはずの機能がなくなっている状態のこと

デプロイ
ウェブアプリケーションの開発において、作製したプログラムをサーバーにアップロードし、当該のサーバー環境で利用可能にする、という手続きが挙げられます。ただし、必ずしも公開（リリース）作業を指すとは限らず、開発環境からテスト用の環境へアップロードしてテストに使える状態にすることもデプロイといいます。ソフトウェアをインストールする作業もデプロイに該当します。

コンフリクト
データベースシステムやファイルシステム、バージョン管理システムなどで、同じ対象や領域（レコードやファイルなど）に同時に複数の更新要求が発生し、内容が損なわれたり要求が拒絶されるなど正常に処理できない状態のことをコンフリクトという。（競合状態）

環境
作業を行うフェーズのこと

開発環境（ローカル）
制作担当者がはじめにローカル環境を利用して動作確認などを行うところ。
環境の用意と管理は制作会社側で行います。
ここでの確認で問題が無いようならテスト環境での検証段階に入ります。

検証環境（ステージング）
制作内容に問題が無いか検証する環境です。誤記やリンクミス、動作に不具合が無いかを社内検証し、修正が必要な場合には修正対応をします。社内検証が済んだ後はクライアントチェックやFB対応を行い、この段階でクライアントOKまで作業します。
リバース プロキシ、SSL 設定、またはロードバランサなどを含めて本番環境と同じ構成にし、本番環境をほぼ複製したものになります。アップするファイルも本番環境と同じものだけです。テスト環境でOKが出たものをアップし、動作や不具合が無いかを最終チェックします。

本番環境
ステージング環境でOKになったものをアップするところ。環境の用意と管理はクライアント側で行うのがほとんどです。
私たちがサイト閲覧をしてる環境になります。

設計書／仕様書
こう有るべきという仕様（決め事）を記載する書類。その仕様を実現する為に、「どのようなシステム構成にするか？」、「どうやって作るか？」という実現方法を記載した書類。

要件定義
ヒアリング調査でクライアントが実装してほしい機能や性能を明確にしていきます。整理した情報をもとに、新しい業務フローやシナリオをクライアントに伝え、認識に齟齬がないか確かめます。

基本設計書
クライアントの要望を満たす機能や製品をどのように作るか決めます。作成すべき機能を洗い出し、どのようなハードウェアやミドルウェアを組み合わせることで機能が実装できるかを記載した設計書。

詳細設計書
実際にどのような開発を行いプログラムを動作させるかを記載した、開発者向け設計書。機能が正常に動作した場合と、異常が見受けられた場合の処理方法も記載していく必要があります。特に異常時に関しては詳細に処理フローを記載しておきましょう。

テスト
完成したものが正常に動くか確認する作業

単体テスト（UT）
プログラミングして完成した機能単体がエラーなく作動しているかどうか、性能を評価します。想定通りに作動していることを証明できるエビデンスをとっていく必要があり、成果物もまたエビデンスとなります。

結合テスト（CT／IT）
単体テストのフェーズで想定通りに作動した機能同士を連携させ、きちんと作動するか確認して性能を評価します。機能を連結させてもプログラムがエラーなく作動することを確認することが目的です。

総合テスト（ST）
システム全体を連結させてその性能を評価します。全体を連結させてもエラーなく作動するか確認することが目的です。作動の様子を示すエビデンスを成果物とします。
異常が発生した場合は、前のフェーズに戻ってどこにエラーがあるのかを探らなければいけません。スムーズに機能が作動するようであれば、次のフェーズに進みます。

エビデンス／証跡
プログラムやシステムの試験の結果や、動作検証を確認したことを証拠として残すために作成する。または、システムトラブルやシステムバグが発生した際にも、システムの状況を事実として記録するために作成する。

データパッチ
アップデート、修正プログラム。後から変更を加えるために付け加えるソフトのこと。

Access
米マイクロソフト（Microsoft）社のデータベースソフトの一つ.

マクロ
「複数の操作をまとめて必要に応じて呼び出せるようにする機能」を指します。特にExcelの自動化で使われる例が多く、データ集計や分類、シートの印刷などさまざまな作業を自動で行わせることができます。

VBA
マクロの操作内容を記録するためのプログラミング言語をVBA（Visual Basic for Applications）といい、VBAを使いこなせるほどマクロでより幅広い業務を自動化できるようになります。Microsoft ExcelをはじめとしたMicrosoft Officeのソフトウェアを操作することに長けたプログラミング言語

GAS（Google Apps Script）
Google Apps Script（GAS）とは、Googleが開発・提供しているプログラミング言語です。JavaScriptというWebブラウザ上で動作するプログラミング言語をベースに作成されています。GoogleスプレッドシートをはじめとしたG Suiteアプリケーションを操作するのが得意なプログラミング言語

API
APIとはApplication Programming Interfaceの略称であり、何かしらのサービス提供者が、そのサービスを利用するために提供するインタフェースのことだ。アプリケーション開発者（API利用者）がAPIを利用すれば、同じ機能を持ったサービスを開発する必要がないため、開発効率の向上や開発費用の低減が期待できる。

WEB API
先に述べたAPI提供者とAPI利用者とのやりとりをHTTP／HTTPSベースで実現するAPIだ。「Web」ではないAPIは通常、API利用者が用いるプログラミング言語と同じ言語で提供されることが多い。一方Web APIはHTTP／HTTPSベースのAPIであるため、異なるプログラミング言語で開発されたアプリケーション間を連携させることが可能だ。さらにWebブラウザでも利用できるなど、他のAPIよりも汎用（はんよう）的に利用できる

REST API
RESTとはRepresentational State Transferの略称で、下記のRESTの考え方に従って実装されたAPIをRESTful API（またはREST API）と呼ぶ。
RESTの4つの設計原則
・セッションなどの状態管理を行わない。(やり取りされる情報はそれ自体で完結して解釈することができる)
・情報を操作する命令の体系が予め定義・共有されている。（HTTPのGETやPOSTメソッドなど）
・すべての情報は汎用的な構文で一意に識別される。（URLやURIなど）
・情報の内部に、別の情報や(その情報の別の)状態へのリンクを含めることができる。
・リソースに対してURLが対応づけられる。（そのため、URLが名詞的になることが多い）

SOAP
SOAPは、XMLを利用したWebサービス連携プロトコルだ。XMLで記述された「SOAPメッセージ」と呼ばれるデータをやりとりすることで、メッセージを交換する。WSDL（Web Services Description Language）というWebサービスインタフェース記述言語でSOAPメッセージの構造を定義でき、このWSDLによる定義ファイルをAPI利用者、API提供者双方で保持することで、独自に定義した構造のSOAPメッセージをやりとりすることが可能となる。

Ajax
ウェブブラウザ内で非同期通信を行いながらインターフェイスの構築を行うプログラミング手法である

XML
xtensible Markup Languageの略。
文書やデータの意味や構造を記述するためのマークアップ言語の一つ（HTMLと似たようなもの)
XMLはタグを自由に設定でき、そのタグに意味づけをすることができます。
データのやりとりで「XML」を使えば、複数のデータを同時にやりとりしても、どのデータがどの要素なのか一発で判明できます。
ただ現在では、AjaxにはXMLの代わりにJSONという型がよく使われています。
Ajaxという名前にXMLが入っているので、他の型は使えないように思いますが、
そうではないんですね。

JSON
JavaScript Object Notationの略。
軽量のデータ交換フォーマットで、人間にとって読み書きが容易で、マシンにとっても簡単にパースや生成を行なえる形式です。

ステータスコード
HTTPにおいてWebサーバからのレスポンスの意味を表現する3桁の数字からなるコードである
１〜インフォメーション情報　２〜成功　３〜リダイレクト　４〜クライアントエラー　５〜サーバーエラー

クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
あるオリジンで動作しているウェブアプリケーションに、異なるオリジンにある選択されたリソースへのアクセス権を与えるようブラウザーに指示するための仕組みです。ウェブアプリケーションは、自分とは異なるオリジン (ドメイン、プロトコル、ポート番号) にあるリソースをリクエストするとき、オリジン間 HTTP リクエストを実行します。

バリデーション
入力チェックのこと

データ連携
異なるアプリケーションやシステムをまたいでデータを共有、活用するために、それぞれの言葉や解釈の垣根を取り払うプロセスです

Daemon
UNIX系のOS（LinuxとかMacとか）における常駐プログラムの呼び名

CRON
指示した時間に指定したプログラムを動かしてくれるやつ

バッチ
「ひと束」「一群」「1回分にまとめる」という意味で、バッチ処理はあらかじめ登録した一連の処理を自動的に実行する処理方式を指す。 複数のプログラムやファイル転送コマンドなどの実行順序を定義し、大量のデータを一括処理する。

ログ
履歴のこと

CSV
各項目間が「カンマ」で区切られているテキストデータ
CSVはカンマを区切り文字として使います

TSV
各項目間が「タブ」で区切られているテキストデータ
TSVはタブを区切り文字として使います

プルリクエスト（マージリクエスト）
コードの変更をレビュワーに通知し、マージを依頼する機能です。 コードのレビューを受けることで、1人で作ると気がつかないコードの指摘やバグや記述ミスの発見ができ、コードの品質を高めます。 レビュワーにとっても、他人が書いたコードを読むことで新しい書き方を発見できるというメリットがあります。

■ チケット管理ツール
asana
Asanaの特徴
分かりやすいデザインと簡略化された操作性で効率的にプロジェクト管理が可能
視覚的に分かりやすい進捗状況により、計画変更にも柔軟に対応可能
優先度カスタムフィールドを使えばいつでも最重要のタスクを洗い出せる

Backlog
Backlogの特徴
国内シェアNo1のプロジェクト管理システム
ガントチャートで紐付けられた作業はタイムラインで確認
タスクの担当者や期限を明確に管理できるのでミスを防止しやすい

Jooto
Jootoの特徴
視覚的に分かりやすいタスク管理で初心者でも使いやすい
分単位で打ち合わせや締め切りなどのスケジュール管理が可能
チームメンバーだけでなく取引先とのコミュニケーションも可能

Readmine
Redmineの特徴
オープンソースで完全無料
「チケット」機能で担当業務についての記録が一目で確認できる
「活動」機能で業務の進捗を時系列で把握できる

Trello
Trelloの特徴
「カンバン・ボード」の定番ツール
仕事や副業、プライベートの予定まで全てのチームワークに役立つ
プロジェクトの最初から最後まで一目で把握できるレイアウト

■ バージョン管理
集中型
集中型は「ひとつのリポジトリに接続してみんなで使う」タイプ

分散型
分散型は「各自、個人のパソコン上にリポジトリを持ち、好きなタイミングで好きなリポジトリに同期する」タイプ

Github
GitHubはWEB上でグラフィカルに扱う（マウスでポチポチする）ことができます。 また、各プロジェクトにwiki（メモ書き）やタスク管理ツールなど、コラボレーションのための機能も充実しているのが特徴です

Backlog
基本となるタスク管理機能（課題管理・ガントチャート）に加え、Wikiによるドキュメント管理や、共有ストレージ機能を備えるなど、業務管理で活用できるさまざまな機能が標準で含まれていることだ

SourceTree
Gitを簡単に使えるようにしたツールでGitの理解も簡単にできる優れものです。先ほど挫折する理由として挙げた、全てコマンドで操作していくCUI形式ではなく、ぽちぽちクリックしながら視覚的に操作していくGUI形式でGitを使えるツールです。
Mac/Winどちらでもすぐインストールできる
無料で使える
日本語対応している
自分、他人の作業を見える化できるから安心

Tortoise SVN
Windowsのシェルと統合されている。
バージョン管理の機能毎にアプリケーションを使い分ける必要がなく、使い慣れた方法のまま操作することができます。
GUI操作なので通常のWindowsのアプリケーションを操作するのと同じ感覚で操作が可能です。
TortoiseSVNでバージョン管理されているファイルやフォルダーは、アイコンオーバーレイにより容易に状態を確認することができます

Git Flow
機能拡張のためにプログラムを追加するためのツール

master
プロダクトとしてリリースするためのブランチ。リリースしたらタグ付けする。

release
プロダクトリリースの準備。 機能の追加やマイナーなバグフィックスとは独立させることで、 リリース時に含めるコードを綺麗な状態に保つ（機能追加中で未使用のコードなどを含まないようにする）ことができる。 develop ブランチにリリース予定の機能やバグフィックスがほぼ反映した状態で develop から分岐する。 リリース準備が整ったら, master にマージし、タグをつける。次に develop にマージする

develop
開発ブランチ。コードが安定し、リリース準備ができたら master へマージする。リリース前はこのブランチが最新バージョンとなる

feature
機能の追加。 develop から分岐し、 develop にマージする

■ FW／ライブラリ
FW
自社のサーバーを不正アクセスやサイバー攻撃などから守るために使われるセキュリティ機能です。ファイアウォールを日本語に直訳すると「防火壁」になり、名前のとおりインターネットと自社サーバーネットワークの間に設置し、外部からの攻撃を監視・制御し、内部ネットワークを保護する役割を果たします

Spring Framework
Javaの開発環境で使用できるオープンソースのフレームワークです。企業やエンジニアによっては、縮めてSpring（スプリング）と呼ぶこともあります。プログラムをシンプルにまとめることができます。コードを短くわかりやすくすることで、不具合の特定が容易になるほか、プログラムの修正も行いやすくなります。クラスの依存関係が解消されて、動作のテストを行えるようになります。結果として、1つひとつのプログラムを独立させやすくなり、システムの開発や改修が楽になるのです。

Struts
MVCシステムデザインを推奨しているため、かなり生産性が高いのも特徴の1つ。
多種多様なフレームワークの中でも独立性が高いため、各機能の専門家が注力することができます
独自のタグライブラリが用意されているため一から構築する必要がありません。
独自のタグライブラリを使用すれば、記述レベルの差異が出ず、均等に質のいいアプリを開発できます

JSF（Java Server Faces）
Webアプリケーションを作るうえでの基本的なプレゼンテーションコンポーネントが用意されていることです。
文字入力のためのテキストフィールド
送信、キャンセルなどのボタン
複数の選択肢の中から選べるセレクトボックス
などのコンポーネントを、「JSPカスタムタグライブラリ」を使用して表現できます。
そしてそのコンポーネントへ追加機能を与えることも可能です

ライブラリ
汎用性の高い複数のプログラムを再利用可能な形でひとまとまりにしたものである

Bootstrap
ウェブサイトやWebアプリケーションを作成するフロントエンドWebアプリケーションフレームワークである。タイポグラフィ、フォーム、ボタン、ナビゲーション、その他構成要素やJavaScript用拡張などが、HTMLおよびCSSベースのデザインテンプレートとして用意されている

Flyway
Java製のデータベースマイグレーションツールで、下記の特徴を持つ
コマンドライン、Javaクラス、mvnプラグインとして実行可能
指定したフォルダにバージョン番号付きSQLファイルを配置してマイグレーションを実行すると未実行のバージョンのSQLのみ実行してくれる。
データベースにマイグレーション状況管理用テーブルを作成して管理する
様々なDBMSに対応してる

Jackson
JSON形式のデータを処理するための高速かつ軽量なJavaライブラリです。「Jackson Java JSON-processor」とも呼ばれています

jQuery
他のライブラリに比べて、文法も簡単でシンプルなので覚えやすいです。
それなのにブラウザの種類に依存せず、アニメーションから効果、非同期通信に関わる部分まで幅広く対応することができます

Junit
Javaで開発されたプログラムにおいてユニットテスト（単体テスト）の自動化を行うためのフレームワークである

Log4j
ログ管理やデバックに使う、Javaのライブラリ

Lombok
Java特有の冗長なコードを簡潔にしてくれるオープンソースのライブラリです。
ライセンスはMITライセンスなので自由に利用することが出来ます。
LombokはEclipseの自動生成機能の代わりにアノテーションを使うことで冗長なコードを簡潔にします

ORM
オブジェクト指向言語におけるオブジェクトと、リレーショナルデータベースにおけるレコードとを対照させることである
リレーショナルデータベースのレコードがオブジェクトとして直感的に扱えるようになり、リレーショナルデータベースにアクセスするプログラムを記述する処理を容易にすることが可能となる

■ 連絡ツール
ChatWork
・タスク管理機能がある
・社外とのダイレクトメッセージが利用できる（Slackの場合、同じワークスペース内でのみ会話が可能です）
・セキュリティの高い法人プランがある
・非同期型コミュニケーション

Slack
・カスタマイズが出来て楽しい
・アプリ連携機能が豊富
・スニペット機能
・半同期型コミュニケーション

IP Messenger
LAN 用メッセンジャーソフトです。
同じネットワーク内のメンバーを自動認識し、簡単にクライアント同士がリアルタイムに情報交換できる優れたソフトウェアです。

■ Java
Javadoc
JavaのソースコードからHTML形式のAPI仕様書を生成するもの

アノテーション
特定のデータに対して情報タグ（メタデータ）を付加する、という意味で用いられる言葉である。 アノテーションとして付加されるメタデータは基本的に文字情報＝テキストデータであるが、メタデータの付与対象となるデータの形式は幅広い

メモリ管理
コンピュータのメモリを管理するもの。 単純化すれば、プログラム（プロセスなど）の要求に応じてメモリの一部を割り当てる方法と、そのメモリが不要となったときに再利用のために解放する方法を提供する

ヒープ
データ構造の一種で、木構造（ツリー構造）のうち、親要素が子要素より常に大きい（あるいは小さい）という条件を満たすもの

GC
ガベージコレクション（英: garbage collection; GC）とは、コンピュータプログラムが動的に確保したメモリ領域のうち、不要になった領域を自動的に解放する機能である。 「ガベージコレクション」を直訳すれば「ゴミ集め」「ごみ拾い」となる。

GoF
Goodness of fitの略で、当てはまりの良さを表す指標の総称をこのように呼ぶことがある。

デザインパターン
デザインパターン（型紙（かたがみ）または設計パターン、英: design pattern）とは、過去のソフトウェア設計者が発見し編み出した設計ノウハウを蓄積し、名前をつけ、再利用しやすいように特定の規約に従ってカタログ化したものである

■ その他
オブジェクト指向
物事を分かりやすくまとめたり、整理整頓すること(オブジェクト（モノ）としてまとめる)

バッチ処理
バッチ処理はあらかじめ登録した一連の処理を自動的に実行する処理方式を指す。複数のプログラムやファイル転送コマンドなどの実行順序を定義し、大量のデータを一括処理する

コンパイル
人間が分かる言葉で書いたプログラムの元ネタ（ソースコード）の中身をコンピュータさんが分かる言葉に翻訳すること

カバレッジ
モノや範囲に対して全体の内どれくらいをカバーいているかを表すための指標です
テストを全部やると、これだけ確認できるはずだよ。それに対して、今はこれだけの確認が終わってるよ、な割合のこと

プラットホーム
サービスやシステム、ソフトウェアを提供・カスタマイズ・運営するために必要な「共通の土台（基盤）となる標準環境」を指します。
例えば、パソコンでは、ソフトウェアを動かすためのプラットフォームは、WindowsやMac OS、UNIX、LINUXといったOS（オペレーションシステム）を指す場合が一般的です。